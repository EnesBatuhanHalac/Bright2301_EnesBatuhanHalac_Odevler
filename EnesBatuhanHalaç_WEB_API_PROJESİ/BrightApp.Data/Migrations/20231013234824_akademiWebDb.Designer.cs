// <auto-generated />
using System;
using BrightApp.Data.Concrete.EFCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrightApp.Data.Migrations
{
    [DbContext(typeof(BrightAcademieContext))]
    [Migration("20231013234824_akademiWebDb")]
    partial class akademiWebDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.12");

            modelBuilder.Entity("BrightApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KategoriAciklamasi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("KategorininAktiflikDurumu")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KategoriAciklamasi = "FullStack Developer Yetkinlikleri Kazandirir",
                            KategoriAdi = "Full Stack Development",
                            KategorininAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 2,
                            KategoriAciklamasi = "FrontEnd Developer Yetkinlikleri Kazandirir",
                            KategoriAdi = "FrontEnd Development",
                            KategorininAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 3,
                            KategoriAciklamasi = "BackEnd Development Yetkinlikleri Kazandirir.",
                            KategoriAdi = "BackEnd Development",
                            KategorininAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 4,
                            KategoriAciklamasi = "Siber Güvenlik Uzmani Yetistirme Kursu",
                            KategoriAdi = "SiberGüvenlik",
                            KategorininAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 5,
                            KategoriAciklamasi = "Mobile Developer Yetistirme Kursu",
                            KategoriAdi = "Mobile Development",
                            KategorininAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 6,
                            KategoriAciklamasi = "DevOps Bt Operations",
                            KategoriAdi = "DevOps",
                            KategorininAktiflikDurumu = true
                        });
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EgitimAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EgitimBaslangicTarihi")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EgitimPlanlananBitisTarihi")
                        .HasColumnType("TEXT");

                    b.Property<int>("EgitimSuresiAy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EgitimToplamDersSaati")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EgitiminAktiflikDurumu")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EgitiminDegerlendirilmesi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitiminIcerigi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitiminKazanimlari")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitiminSeviyesi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitiminStatusu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitiminYeri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "Bu Kurs Sonunda Junior Bir Full Stack Developer Olacaksiniz.",
                            CategoryId = 1,
                            EgitimAdi = "Full Stack Developer Yetiştirme Kursu",
                            EgitimBaslangicTarihi = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimPlanlananBitisTarihi = new DateTime(2026, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimSuresiAy = 6,
                            EgitimToplamDersSaati = 600,
                            EgitiminAktiflikDurumu = true,
                            EgitiminDegerlendirilmesi = "Bu Egitim Yazilima Yeni Başlayacak Olan Kişiler icindir.",
                            EgitiminIcerigi = "C#/ HTML / CSS / BOOTSTRAP/ JAVASCRİPT / ASP.NETCORE MVC/ASP.NETCORE API /REACT ",
                            EgitiminKazanimlari = "Bu egitim Sonunda Front-End Teklonojisini BackEnd Teklonojisini Ve Mobil Teklonojisini Ögrenmiş Olacaksiniz.Ögrendiginiz Programlar ileBir Site ve Mobil Uygulama'nin Tüm Adimlarinda Yer Alabilirsiniz.",
                            EgitiminSeviyesi = "Kolay",
                            EgitiminStatusu = "SoftwareDeveloper",
                            EgitiminYeri = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul"
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "Bu Kurs Ortalama Yazilim bilen Siber Güvenlige ilgisi olan kisiler için tasarlanmistir.",
                            CategoryId = 5,
                            EgitimAdi = "Siber Güvenlik Uzmani Yetistirme Kursu",
                            EgitimBaslangicTarihi = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimPlanlananBitisTarihi = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimSuresiAy = 6,
                            EgitimToplamDersSaati = 600,
                            EgitiminAktiflikDurumu = true,
                            EgitiminDegerlendirilmesi = "Bu Egitim Yazilimi Orta Seviye Bilen Kişiler İçindir.",
                            EgitiminIcerigi = "Aircrack-ng,BeEF,Burp Suite Scanner,Cain and Abel,Fern Wifi Cracker",
                            EgitiminKazanimlari = "Bu kurstan Sonra Siber Güvenlik Elemani veya Siber Güvenlik Uzmani olarak işe başlayabilirsiniz.",
                            EgitiminSeviyesi = "Orta",
                            EgitiminStatusu = "Siber Security",
                            EgitiminYeri = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul"
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "Bu Kurs Yazilim Uzmanlari İçin Kendilerine Artı Katacaktır.",
                            CategoryId = 3,
                            EgitimAdi = "BackEnd Geliştirme Kursu",
                            EgitimBaslangicTarihi = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimPlanlananBitisTarihi = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimSuresiAy = 6,
                            EgitimToplamDersSaati = 600,
                            EgitiminAktiflikDurumu = true,
                            EgitiminDegerlendirilmesi = "Bu Egitim Yazilimi Senior Seviye Yazilima Hakim Kişiler İçindir.",
                            EgitiminIcerigi = "C#,C++,JAVA,NODEJS,Asp.NetCore Web Api, Asp.NETCore MVC",
                            EgitiminKazanimlari = "Bu kurstan Sonra BackEnd Yazilim Uzmani olarak işe başlayabilirsiniz.",
                            EgitiminSeviyesi = "Zor",
                            EgitiminStatusu = "BackEndDevelopment",
                            EgitiminYeri = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul"
                        },
                        new
                        {
                            Id = 4,
                            Aciklama = "Bu Kurs Yazilima Başlayacak ve Yazilima İlgisi olan kisiler için tasarlanmistir. FrontEnd Tasarimlari Yapmaniz İçin Ögrenmeniz Gereken Programlari İçerir.",
                            CategoryId = 2,
                            EgitimAdi = "FrontEndDeveloper Yetistirme Kursu",
                            EgitimBaslangicTarihi = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimPlanlananBitisTarihi = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimSuresiAy = 6,
                            EgitimToplamDersSaati = 600,
                            EgitiminAktiflikDurumu = true,
                            EgitiminDegerlendirilmesi = "Bu Egitim Yazilima Yeni Başlayan Kişiler İçindir..",
                            EgitiminIcerigi = "JavaScript,Html,css,Bootstrap",
                            EgitiminKazanimlari = "Bu kurstan Sonra Herhangi Bir Web Uygulamasina Front End Tasarimlarini Uygulama Yetenegi Kazanacaksiniz. ",
                            EgitiminSeviyesi = "Orta",
                            EgitiminStatusu = "FrontEnd",
                            EgitiminYeri = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul"
                        },
                        new
                        {
                            Id = 5,
                            Aciklama = "Bu Kurs Yazilima Yeni Başlayacak  Ve Mobil Development'a ilgili kisiler için tasarlanmistir.",
                            CategoryId = 4,
                            EgitimAdi = "Mobile Developer Yetistirme Kursu",
                            EgitimBaslangicTarihi = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimPlanlananBitisTarihi = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EgitimSuresiAy = 6,
                            EgitimToplamDersSaati = 600,
                            EgitiminAktiflikDurumu = true,
                            EgitiminDegerlendirilmesi = "Bu Egitim Yazilima Yeni Başlayacak Kişiler İçindir.",
                            EgitiminIcerigi = "React ,Ajax ,NodeJs,TypeScript,Javascript,Html,Css,Flutter",
                            EgitiminKazanimlari = "Bu kurstan Sonra Mobile Developer Olarak İşe Başlayabilirsiniz.Ögrendiginiz Programlar ile Mobil Uygulamalar Tasarlayabilirsiniz.",
                            EgitiminSeviyesi = "Kolay",
                            EgitiminStatusu = "Mobile Development",
                            EgitiminYeri = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul"
                        });
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirmaAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirmaAdresi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Hakkimizda")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IletisimBilgileri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SıkSorularSorular")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirmaAdi = "Bright Academy",
                            FirmaAdresi = "Kuloğlu Mh., Barbaros Blv. Yıldız İş Hanı No:9, 34353 Beşiktaş/İstanbul",
                            Hakkimizda = "Junior Yazilimci Yetistirmek adina belirli alanlarda kurslar veren bir Kurum",
                            IletisimBilgileri = "Telefon:(0212) 381 50 00",
                            SıkSorularSorular = "1-) Ne zaman Kuruldunuz? 2-)Kurs Bitiminde Ne olacak? 3-)Kurslarinizin İçerigi Nedir?"
                        });
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Trainee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KursiyerAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KursiyerEgitimDurumu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("KursiyerSoyAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrainerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Trainees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            KursiyerAdi = "Mucahit",
                            KursiyerEgitimDurumu = "Lise",
                            KursiyerSoyAdi = "Çetin",
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            KursiyerAdi = "Emine",
                            KursiyerEgitimDurumu = "Üniversite",
                            KursiyerSoyAdi = "Uzun",
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 1,
                            KursiyerAdi = "Sinan",
                            KursiyerEgitimDurumu = "Yükseklisans",
                            KursiyerSoyAdi = "ÇetinALP",
                            TrainerId = 1
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 2,
                            KursiyerAdi = "Emine",
                            KursiyerEgitimDurumu = "Üniversite",
                            KursiyerSoyAdi = "Uzun",
                            TrainerId = 2
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 2,
                            KursiyerAdi = "Mehmet",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Uzun",
                            TrainerId = 2
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 2,
                            KursiyerAdi = "Ali",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Yerli",
                            TrainerId = 2
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 3,
                            KursiyerAdi = "Ahmet",
                            KursiyerEgitimDurumu = "Üniversite",
                            KursiyerSoyAdi = "Uzun",
                            TrainerId = 3
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 3,
                            KursiyerAdi = "Hasan",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Uzun",
                            TrainerId = 3
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 3,
                            KursiyerAdi = "Ömür",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Yerli",
                            TrainerId = 3
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 4,
                            KursiyerAdi = "Enes",
                            KursiyerEgitimDurumu = "Üniversite",
                            KursiyerSoyAdi = "Yerli",
                            TrainerId = 4
                        },
                        new
                        {
                            Id = 11,
                            CourseId = 4,
                            KursiyerAdi = "Mehmet",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Yerli",
                            TrainerId = 4
                        },
                        new
                        {
                            Id = 12,
                            CourseId = 4,
                            KursiyerAdi = "Ahmet",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Yerli",
                            TrainerId = 4
                        },
                        new
                        {
                            Id = 13,
                            CourseId = 5,
                            KursiyerAdi = "Emine",
                            KursiyerEgitimDurumu = "Üniversite",
                            KursiyerSoyAdi = "Kısa",
                            TrainerId = 5
                        },
                        new
                        {
                            Id = 14,
                            CourseId = 5,
                            KursiyerAdi = "Mehmet",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Kısa",
                            TrainerId = 5
                        },
                        new
                        {
                            Id = 15,
                            CourseId = 5,
                            KursiyerAdi = "Ali",
                            KursiyerEgitimDurumu = "Önlisans",
                            KursiyerSoyAdi = "Keskin",
                            TrainerId = 5
                        });
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EgitmenAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EgitmenDegerlendirmesiPuan")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EgitmenDegerlendirmesiYorum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitmenDeneyim")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitmenEgitimBilgileri")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitmenSoyAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EgitmenUzmanlikAlani")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("EgitmeninAktiflikDurumu")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Trainers");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            EgitmenAdi = "EnginNiyazi",
                            EgitmenDegerlendirmesiPuan = 8,
                            EgitmenDegerlendirmesiYorum = "",
                            EgitmenDeneyim = "Deneyimli",
                            EgitmenEgitimBilgileri = "İstanbul Üniversitesi Bilgisayar Mühendisligi ",
                            EgitmenSoyAdi = "Ergül",
                            EgitmenUzmanlikAlani = "BackEnd Development",
                            EgitmeninAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            EgitmenAdi = "Enes",
                            EgitmenDegerlendirmesiPuan = 9,
                            EgitmenDegerlendirmesiYorum = "",
                            EgitmenDeneyim = "Deneyimli",
                            EgitmenEgitimBilgileri = "ODTÜ Bilgisayar Mühendisligi ve Kodlama Egitimi,MIT California Yapayzeka ",
                            EgitmenSoyAdi = "Uzun",
                            EgitmenUzmanlikAlani = "FullStack Development",
                            EgitmeninAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            EgitmenAdi = "Ali can",
                            EgitmenDegerlendirmesiPuan = 7,
                            EgitmenDegerlendirmesiYorum = "",
                            EgitmenDeneyim = "Deneyimsiz",
                            EgitmenEgitimBilgileri = "İstanbul Üniversitesi Bilgisayar Mühendisligi ",
                            EgitmenSoyAdi = "Gören",
                            EgitmenUzmanlikAlani = "FrontEnd Development",
                            EgitmeninAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            EgitmenAdi = "Asli",
                            EgitmenDegerlendirmesiPuan = 8,
                            EgitmenDegerlendirmesiYorum = "",
                            EgitmenDeneyim = "Deneyimli",
                            EgitmenEgitimBilgileri = "İstanbul Üniversitesi Bilgisayar Mühendisligi ",
                            EgitmenSoyAdi = "Mizrak",
                            EgitmenUzmanlikAlani = "Mobile Development",
                            EgitmeninAktiflikDurumu = true
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            EgitmenAdi = "Ecem",
                            EgitmenDegerlendirmesiPuan = 5,
                            EgitmenDegerlendirmesiYorum = "",
                            EgitmenDeneyim = "Deneyimli",
                            EgitmenEgitimBilgileri = "İstanbul Üniversitesi Bilgisayar Mühendisligi ",
                            EgitmenSoyAdi = "Gül",
                            EgitmenUzmanlikAlani = "SiberSecurityDevelopment",
                            EgitmeninAktiflikDurumu = true
                        });
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Course", b =>
                {
                    b.HasOne("BrightApp.Entity.Concrete.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Trainee", b =>
                {
                    b.HasOne("BrightApp.Entity.Concrete.Course", "Course")
                        .WithMany("Trainees")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BrightApp.Entity.Concrete.Trainer", "Trainer")
                        .WithMany("Trainees")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Trainer", b =>
                {
                    b.HasOne("BrightApp.Entity.Concrete.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Course", b =>
                {
                    b.Navigation("Trainees");
                });

            modelBuilder.Entity("BrightApp.Entity.Concrete.Trainer", b =>
                {
                    b.Navigation("Trainees");
                });
#pragma warning restore 612, 618
        }
    }
}
